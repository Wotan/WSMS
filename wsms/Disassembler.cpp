#include <iostream>
#include <sstream>

#include "Disassembler.hh"

static InstrDesc const instrTab[] = {
  {0x88 + 7, 0x00, 0x00, 1, "ADC A,A"},
  {0x88 + 0, 0x00, 0x00, 1, "ADC A,B"},
  {0x88 + 1, 0x00, 0x00, 1, "ADC A,C"},
  {0x88 + 2, 0x00, 0x00, 1, "ADC A,D"},
  {0x88 + 3, 0x00, 0x00, 1, "ADC A,E"},
  {0x88 + 4, 0x00, 0x00, 1, "ADC A,H"},
  {0x88 + 5, 0x00, 0x00, 1, "ADC A,L"},
  {0xCE, 0x00, 0x00, 1, "ADC A,%N%"},
  {0x8E, 0x00, 0x00, 1, "ADC A,(HL)"},
  {0xDD, 0x8E, 0x00, 2, "ADC A,(IX+%N%)"},
  {0xFD, 0x8E, 0x00, 2, "ADC A,(IY+%N%)"},
  {0xED, 0x4A, 0x00, 2, "ADC HL,BC"},
  {0xED, 0x5A, 0x00, 2, "ADC HL,DE"},
  {0xED, 0x6A, 0x00, 2, "ADC HL,HL"},
  {0xED, 0x7A, 0x00, 2, "ADC HL,SP"},
  {0x80 + 7, 0x00, 0x00, 1, "ADD A,A"},
  {0x80 + 0, 0x00, 0x00, 1, "ADD A,B"},
  {0x80 + 1, 0x00, 0x00, 1, "ADD A,C"},
  {0x80 + 2, 0x00, 0x00, 1, "ADD A,D"},
  {0x80 + 3, 0x00, 0x00, 1, "ADD A,E"},
  {0x80 + 4, 0x00, 0x00, 1, "ADD A,H"},
  {0x80 + 5, 0x00, 0x00, 1, "ADD A,L"},
  {0xC6, 0x00, 0x00, 1, "ADD A,%N%"},
  {0x86, 0x00, 0x00, 1, "ADD A,(HL)"},
  {0xDD, 0x86, 0x00, 2, "ADD A,(IX+%N%)"},
  {0xFD, 0x86, 0x00, 2, "ADD A,(IY+%N%)"},
  {0x09, 0x00, 0x00, 1, "ADD HL,BC"},
  {0x19, 0x00, 0x00, 1, "ADD HL,DE"},
  {0x29, 0x00, 0x00, 1, "ADD HL,HL"},
  {0x39, 0x00, 0x00, 1, "ADD HL,SP"},
  {0xDD, 0x09, 0x00, 2, "ADD IX,BC"},
  {0xDD, 0x19, 0x00, 2, "ADD IX,DE"},
  {0xDD, 0x29, 0x00, 2, "ADD IX,IX"},
  {0xDD, 0x39, 0x00, 2, "ADD IX,SP"},
  {0xFD, 0x09, 0x00, 2, "ADD IY,BC"},
  {0xFD, 0x19, 0x00, 2, "ADD IY,DE"},
  {0xFD, 0x29, 0x00, 2, "ADD IY,IY"},
  {0xFD, 0x39, 0x00, 2, "ADD IY,SP"},
  {0xA0 + 7, 0x00, 0x00, 1, "AND A"},
  {0xA0 + 0, 0x00, 0x00, 1, "AND B"},
  {0xA0 + 1, 0x00, 0x00, 1, "AND C"},
  {0xA0 + 2, 0x00, 0x00, 1, "AND D"},
  {0xA0 + 3, 0x00, 0x00, 1, "AND E"},
  {0xA0 + 4, 0x00, 0x00, 1, "AND H"},
  {0xA0 + 5, 0x00, 0x00, 1, "AND L"},
  {0xE6, 0x00, 0x00, 1, "AND %N%"},
  {0xA6, 0x00, 0x00, 1, "AND (HL)"},
  {0xDD, 0xA6, 0x00, 2, "AND (IX+%N%)"},
  {0xFD, 0xA6, 0x00, 2, "AND (IY+%N%)"},
  {0xCD, 0x00, 0x00, 1, "CALL %NN%"},
  {0xDC, 0x00, 0x00, 1, "CALL C,%NN%"},
  {0xD4, 0x00, 0x00, 1, "CALL NC,%NN%"},
  {0xFC, 0x00, 0x00, 1, "CALL M,%NN%"},
  {0xF4, 0x00, 0x00, 1, "CALL P,%NN%"},
  {0xCC, 0x00, 0x00, 1, "CALL Z,%NN%"},
  {0xC4, 0x00, 0x00, 1, "CALL NZ,%NN%"},
  {0xEC, 0x00, 0x00, 1, "CALL PE,%NN%"},
  {0xE4, 0x00, 0x00, 1, "CALL PO,%NN%"},
  {0x3F, 0x00, 0x00, 1, "CCF"},
  {0xB8 + 7, 0x00, 0x00, 1, "CP A"},
  {0xB8 + 0, 0x00, 0x00, 1, "CP B"},
  {0xB8 + 1, 0x00, 0x00, 1, "CP C"},
  {0xB8 + 2, 0x00, 0x00, 1, "CP D"},
  {0xB8 + 3, 0x00, 0x00, 1, "CP E"},
  {0xB8 + 4, 0x00, 0x00, 1, "CP H"},
  {0xB8 + 5, 0x00, 0x00, 1, "CP L"},
  {0xFE, 0x00, 0x00, 1, "CP %N%"},
  {0xBE, 0x00, 0x00, 1, "CP (HL)"},
  {0xDD, 0xBE, 0x00, 2, "CP (IX+%N%)"},
  {0xFD, 0xBE, 0x00, 2, "CP (IY+%N%)"},
  {0xED, 0xA9, 0x00, 2, "CPD"},
  {0xED, 0xB9, 0x00, 2, "CPDR"},
  {0xED, 0xA1, 0x00, 2, "CPI"},
  {0xED, 0xB1, 0x00, 2, "CPIR"},
  {0x2F, 0x00, 0x00, 1, "CPL"},
  {0x27, 0x00, 0x00, 1, "DAA"},
  {0x3D, 0x00, 0x00, 1, "DEC A"},
  {0x05, 0x00, 0x00, 1, "DEC B"},
  {0x0D, 0x00, 0x00, 1, "DEC C"},
  {0x15, 0x00, 0x00, 1, "DEC D"},
  {0x1D, 0x00, 0x00, 1, "DEC E"},
  {0x25, 0x00, 0x00, 1, "DEC H"},
  {0x2D, 0x00, 0x00, 1, "DEC L"},
  {0x35, 0x00, 0x00, 1, "DEC (HL)"},
  {0xDD, 0x35, 0x00, 2, "DEC (IX+%N%)"},
  {0xFD, 0x35, 0x00, 2, "DEC (IY+%N%)"},
  {0x0B, 0x00, 0x00, 1, "DEC BC"},
  {0x1B, 0x00, 0x00, 1, "DEC DE"},
  {0x2B, 0x00, 0x00, 1, "DEC HL"},
  {0x3B, 0x00, 0x00, 1, "DEC SP"},
  {0xDD, 0x2B, 0x00, 2, "DEC IX"},
  {0xFD, 0x2B, 0x00, 2, "DEC IY"},
  {0xF3, 0x00, 0x00, 1, "DI"},
  {0x10, 0x00, 0x00, 1, "DJNZ $+2"},
  {0xFB, 0x00, 0x00, 1, "EI"},
  {0xE3, 0x00, 0x00, 1, "EX (SP),HL"},
  {0xDD, 0xE3, 0x00, 2, "EX (SP),IX"},
  {0xFD, 0xE3, 0x00, 2, "EX (SP),IY"},
  {0x08, 0x00, 0x00, 1, "EX AF,AF"},
  {0xEB, 0x00, 0x00, 1, "EX DE,HL"},
  {0xD9, 0x00, 0x00, 1, "EXX"},
  {0x76, 0x00, 0x00, 1, "HALT"},
  {0xED, 0x46, 0x00, 2, "IM 0"},
  {0xED, 0x56, 0x00, 2, "IM 1"},
  {0xED, 0x5E, 0x00, 2, "IM 2"},
  {0xDB, 0x00, 0x00, 1, "IN A,(%N%)"},
  {0xED, 0x70, 0x00, 2, "IN (C)"},
  {0xED, 0x78, 0x00, 2, "IN A,(C)"},
  {0xED, 0x40, 0x00, 2, "IN B,(C)"},
  {0xED, 0x48, 0x00, 2, "IN C,(C)"},
  {0xED, 0x50, 0x00, 2, "IN D,(C)"},
  {0xED, 0x58, 0x00, 2, "IN E,(C)"},
  {0xED, 0x60, 0x00, 2, "IN H,(C)"},
  {0xED, 0x68, 0x00, 2, "IN L,(C)"},
  {0x3C, 0x00, 0x00, 1, "INC A"},
  {0x04, 0x00, 0x00, 1, "INC B"},
  {0x0C, 0x00, 0x00, 1, "INC C"},
  {0x14, 0x00, 0x00, 1, "INC D"},
  {0x1C, 0x00, 0x00, 1, "INC E"},
  {0x24, 0x00, 0x00, 1, "INC H"},
  {0x2C, 0x00, 0x00, 1, "INC L"},
  {0x03, 0x00, 0x00, 1, "INC BC"},
  {0x13, 0x00, 0x00, 1, "INC DE"},
  {0x23, 0x00, 0x00, 1, "INC HL"},
  {0x33, 0x00, 0x00, 1, "INC SP"},
  {0xDD, 0x23, 0x00, 2, "INC IX"},
  {0xFD, 0x23, 0x00, 2, "INC IY"},
  {0x34, 0x00, 0x00, 1, "INC (HL)"},
  {0xDD, 0x34, 0x00, 2, "INC (IX+%N%)"},
  {0xFD, 0x34, 0x00, 2, "INC (IY+%N%)"},
  {0xED, 0xAA, 0x00, 2, "IND"},
  {0xED, 0xBA, 0x00, 2, "INDR"},
  {0xED, 0xA2, 0x00, 2, "INI"},
  {0xED, 0xB2, 0x00, 2, "INIR"},
  {0xC3, 0x00, 0x00, 1, "JP $%NN%"},
  {0xE9, 0x00, 0x00, 1, "JP (HL)"},
  {0xDD, 0xE9, 0x00, 2, "JP (IX)"},
  {0xFD, 0xE9, 0x00, 2, "JP (IY)"},
  {0xDA, 0x00, 0x00, 1, "JP C,$%NN%"},
  {0xD2, 0x00, 0x00, 1, "JP NC,$%NN%"},
  {0xFA, 0x00, 0x00, 1, "JP M,$%NN%"},
  {0xF2, 0x00, 0x00, 1, "JP P,$%NN%"},
  {0xCA, 0x00, 0x00, 1, "JP Z,$%NN%"},
  {0xC2, 0x00, 0x00, 1, "JP NZ,$%NN%"},
  {0xEA, 0x00, 0x00, 1, "JP PE,$%NN%"},
  {0xE2, 0x00, 0x00, 1, "JP PO,$%NN%"},
  {0x18, 0x00, 0x00, 1, "JR $%N%+2"},
  {0x38, 0x00, 0x00, 1, "JR C,$%N%+2"},
  {0x30, 0x00, 0x00, 1, "JR NC,$%N%+2"},
  {0x28, 0x00, 0x00, 1, "JR Z,$%N%+2"},
  {0x20, 0x00, 0x00, 1, "JR NZ,$%N%+2"},
  {0xED, 0x47, 0x00, 2, "LD I,A"},
  {0xED, 0x4F, 0x00, 2, "LD R,A"},
  {0xED, 0x57, 0x00, 2, "LD A,I"},
  {0xED, 0x5F, 0x00, 2, "LD A,R"},
  {0x78 + 7, 0x00, 0x00, 1, "LD A,A"},
  {0x78 + 0, 0x00, 0x00, 1, "LD A,B"},
  {0x78 + 1, 0x00, 0x00, 1, "LD A,C"},
  {0x78 + 2, 0x00, 0x00, 1, "LD A,D"},
  {0x78 + 3, 0x00, 0x00, 1, "LD A,E"},
  {0x78 + 4, 0x00, 0x00, 1, "LD A,H"},
  {0x78 + 5, 0x00, 0x00, 1, "LD A,L"},
  {0x3E, 0x00, 0x00, 1, "LD A,%N%"},
  {0x0A, 0x00, 0x00, 1, "LD A,(BC)"},
  {0x1A, 0x00, 0x00, 1, "LD A,(DE)"},
  {0x7E, 0x00, 0x00, 1, "LD A,(HL)"},
  {0xDD, 0x7E, 0x00, 2, "LD A,(IX+%N%)"},
  {0xFD, 0x7E, 0x00, 2, "LD A,(IY+%N%)"},
  {0x3A, 0x00, 0x00, 1, "LD A,(%NN%)"},
  {0x40 + 7, 0x00, 0x00, 1, "LD B,A"},
  {0x40 + 0, 0x00, 0x00, 1, "LD B,B"},
  {0x40 + 1, 0x00, 0x00, 1, "LD B,C"},
  {0x40 + 2, 0x00, 0x00, 1, "LD B,D"},
  {0x40 + 3, 0x00, 0x00, 1, "LD B,E"},
  {0x40 + 4, 0x00, 0x00, 1, "LD B,H"},
  {0x40 + 5, 0x00, 0x00, 1, "LD B,L"},
  {0x06, 0x00, 0x00, 1, "LD B,%N%"},
  {0x46, 0x00, 0x00, 1, "LD B,(HL)"},
  {0xDD, 0x46, 0x00, 2, "LD B,(IX+%N%)"},
  {0xFD, 0x46, 0x00, 2, "LD B,(IY+%N%)"},
  {0x48 + 7, 0x00, 0x00, 1, "LD C,A"},
  {0x48 + 0, 0x00, 0x00, 1, "LD C,B"},
  {0x48 + 1, 0x00, 0x00, 1, "LD C,C"},
  {0x48 + 2, 0x00, 0x00, 1, "LD C,D"},
  {0x48 + 3, 0x00, 0x00, 1, "LD C,E"},
  {0x48 + 4, 0x00, 0x00, 1, "LD C,H"},
  {0x48 + 5, 0x00, 0x00, 1, "LD C,L"},
  {0x0E, 0x00, 0x00, 1, "LD C,%N%"},
  {0x4E, 0x00, 0x00, 1, "LD C,(HL)"},
  {0xDD, 0x4E, 0x00, 2, "LD C,(IX+%N%)"},
  {0xFD, 0x4E, 0x00, 2, "LD C,(IY+%N%)"},
  {0x50 + 7, 0x00, 0x00, 1, "LD D,A"},
  {0x50 + 0, 0x00, 0x00, 1, "LD D,B"},
  {0x50 + 1, 0x00, 0x00, 1, "LD D,C"},
  {0x50 + 2, 0x00, 0x00, 1, "LD D,D"},
  {0x50 + 3, 0x00, 0x00, 1, "LD D,E"},
  {0x50 + 4, 0x00, 0x00, 1, "LD D,H"},
  {0x50 + 5, 0x00, 0x00, 1, "LD D,L"},
  {0x16, 0x00, 0x00, 1, "LD D,%N%"},
  {0x56, 0x00, 0x00, 1, "LD D,(HL)"},
  {0xDD, 0x56, 0x00, 2, "LD D,(IX+%N%)"},
  {0xFD, 0x56, 0x00, 2, "LD D,(IY+%N%)"},
  {0x58 + 7, 0x00, 0x00, 1, "LD E,A"},
  {0x58 + 0, 0x00, 0x00, 1, "LD E,B"},
  {0x58 + 1, 0x00, 0x00, 1, "LD E,C"},
  {0x58 + 2, 0x00, 0x00, 1, "LD E,D"},
  {0x58 + 3, 0x00, 0x00, 1, "LD E,E"},
  {0x58 + 4, 0x00, 0x00, 1, "LD E,H"},
  {0x58 + 5, 0x00, 0x00, 1, "LD E,L"},
  {0x1E, 0x00, 0x00, 1, "LD E,%N%"},
  {0x5E, 0x00, 0x00, 1, "LD E,(HL)"},
  {0xDD, 0x5E, 0x00, 2, "LD E,(IX+%N%)"},
  {0xFD, 0x5E, 0x00, 2, "LD E,(IY+%N%)"},
  {0x60 + 7, 0x00, 0x00, 1, "LD H,A"},
  {0x60 + 0, 0x00, 0x00, 1, "LD H,B"},
  {0x60 + 1, 0x00, 0x00, 1, "LD H,C"},
  {0x60 + 2, 0x00, 0x00, 1, "LD H,D"},
  {0x60 + 3, 0x00, 0x00, 1, "LD H,E"},
  {0x60 + 4, 0x00, 0x00, 1, "LD H,H"},
  {0x60 + 5, 0x00, 0x00, 1, "LD H,L"},
  {0x26, 0x00, 0x00, 1, "LD H,%N%"},
  {0x66, 0x00, 0x00, 1, "LD H,(HL)"},
  {0xDD, 0x66, 0x00, 2, "LD H,(IX+%N%)"},
  {0xFD, 0x66, 0x00, 2, "LD H,(IY+%N%)"},
  {0x68 + 7, 0x00, 0x00, 1, "LD L,A"},
  {0x68 + 0, 0x00, 0x00, 1, "LD L,B"},
  {0x68 + 1, 0x00, 0x00, 1, "LD L,C"},
  {0x68 + 2, 0x00, 0x00, 1, "LD L,D"},
  {0x68 + 3, 0x00, 0x00, 1, "LD L,E"},
  {0x68 + 4, 0x00, 0x00, 1, "LD L,H"},
  {0x68 + 5, 0x00, 0x00, 1, "LD L,L"},
  {0x2E, 0x00, 0x00, 1, "LD L,%N%"},
  {0x6E, 0x00, 0x00, 1, "LD L,(HL)"},
  {0xDD, 0x6E, 0x00, 2, "LD L,(IX+%N%)"},
  {0xFD, 0x6E, 0x00, 2, "LD L,(IY+%N%)"},
  {0xED, 0x4B, 0x00, 2, "LD BC,(%NN%)"},
  {0x01, 0x00, 0x00, 1, "LD BC,%NN%"},
  {0xED, 0x5B, 0x00, 2, "LD DE,(%NN%)"},
  {0x11, 0x00, 0x00, 1, "LD DE,%NN%"},
  {0x2A, 0x00, 0x00, 1, "LD HL,(%NN%)"},
  {0x21, 0x00, 0x00, 1, "LD HL,%NN%"},
  {0xED, 0x7B, 0x00, 2, "LD SP,(%NN%)"},
  {0xF9, 0x00, 0x00, 1, "LD SP,HL"},
  {0xDD, 0xF9, 0x00, 2, "LD SP,IX"},
  {0xFD, 0xF9, 0x00, 2, "LD SP,IY"},
  {0x31, 0x00, 0x00, 1, "LD SP,%NN%"},
  {0xDD, 0x2A, 0x00, 2, "LD IX,(%NN%)"},
  {0xDD, 0x21, 0x00, 2, "LD IX,%NN%"},
  {0xFD, 0x2A, 0x00, 2, "LD IY,(%NN%)"},
  {0xFD, 0x21, 0x00, 2, "LD IY,%NN%"},
  {0x70, 0x00, 0x00, 1, "LD (HL),r"},
  {0x36, 0x00, 0x00, 1, "LD (HL),%N%"},
  {0x02, 0x00, 0x00, 1, "LD (BC),A"},
  {0x12, 0x00, 0x00, 1, "LD (DE),A"},
  {0x32, 0x00, 0x00, 1, "LD (%NN%),A"},
  {0xED, 0x43, 0x00, 2, "LD (%NN%),BC"},
  {0xED, 0x53, 0x00, 2, "LD (%NN%),DE"},
  {0x22, 0x00, 0x00, 1, "LD (%NN%),HL"},
  {0xDD, 0x22, 0x00, 2, "LD (%NN%),IX"},
  {0xFD, 0x22, 0x00, 2, "LD (%NN%),IY"},
  {0xED, 0x73, 0x00, 2, "LD (%NN%),SP"},
  {0xDD, 0x70 + 7, 0x00, 2, "LD (IX+%N%),A"},
  {0xDD, 0x70 + 0, 0x00, 2, "LD (IX+%N%),B"},
  {0xDD, 0x70 + 1, 0x00, 2, "LD (IX+%N%),C"},
  {0xDD, 0x70 + 2, 0x00, 2, "LD (IX+%N%),D"},
  {0xDD, 0x70 + 3, 0x00, 2, "LD (IX+%N%),E"},
  {0xDD, 0x70 + 4, 0x00, 2, "LD (IX+%N%),H"},
  {0xDD, 0x70 + 5, 0x00, 2, "LD (IX+%N%),L"},
  {0xDD, 0x36, 0x00, 2, "LD (IX+%N%),%N%"},
  {0xFD, 0x70 + 7, 0x00, 2, "LD (IY+%N%),A"},
  {0xFD, 0x70 + 0, 0x00, 2, "LD (IY+%N%),B"},
  {0xFD, 0x70 + 1, 0x00, 2, "LD (IY+%N%),C"},
  {0xFD, 0x70 + 2, 0x00, 2, "LD (IY+%N%),D"},
  {0xFD, 0x70 + 3, 0x00, 2, "LD (IY+%N%),E"},
  {0xFD, 0x70 + 4, 0x00, 2, "LD (IY+%N%),H"},
  {0xFD, 0x70 + 5, 0x00, 2, "LD (IY+%N%),L"},
  {0xFD, 0x36, 0x00, 2, "LD (IY+%N%),%N%"},
  {0xED, 0xA8, 0x00, 2, "LDD"},
  {0xED, 0xB8, 0x00, 2, "LDDR"},
  {0xED, 0xA0, 0x00, 2, "LDI"},
  {0xED, 0xB0, 0x00, 2, "LDIR"},
  {0xED, 0x44, 0x00, 2, "NEG"},
  {0x00, 0x00, 0x00, 1, "NOP"},
  {0xB0 + 7, 0x00, 0x00, 1, "OR A"},
  {0xB0 + 0, 0x00, 0x00, 1, "OR B"},
  {0xB0 + 1, 0x00, 0x00, 1, "OR C"},
  {0xB0 + 2, 0x00, 0x00, 1, "OR D"},
  {0xB0 + 3, 0x00, 0x00, 1, "OR E"},
  {0xB0 + 4, 0x00, 0x00, 1, "OR H"},
  {0xB0 + 5, 0x00, 0x00, 1, "OR L"},
  {0xF6, 0x00, 0x00, 1, "OR %N%"},
  {0xB6, 0x00, 0x00, 1, "OR (HL)"},
  {0xDD, 0xB6, 0x00, 2, "OR (IX+%N%)"},
  {0xFD, 0xB6, 0x00, 2, "OR (IY+%N%)"},
  {0xD3, 0x00, 0x00, 1, "OUT (%N%),A"},
  {0xED, 0x71, 0x00, 2, "OUT (C),0"},
  {0xED, 0x79, 0x00, 2, "OUT (C),A"},
  {0xED, 0x41, 0x00, 2, "OUT (C),B"},
  {0xED, 0x49, 0x00, 2, "OUT (C),C"},
  {0xED, 0x51, 0x00, 2, "OUT (C),D"},
  {0xED, 0x59, 0x00, 2, "OUT (C),E"},
  {0xED, 0x61, 0x00, 2, "OUT (C),H"},
  {0xED, 0x69, 0x00, 2, "OUT (C),L"},
  {0xED, 0xAB, 0x00, 2, "OUTD"},
  {0xED, 0xBB, 0x00, 2, "OTDR"},
  {0xED, 0xA3, 0x00, 2, "OUTI"},
  {0xED, 0xB3, 0x00, 2, "OTIR"},
  {0xF1, 0x00, 0x00, 1, "POP AF"},
  {0xC1, 0x00, 0x00, 1, "POP BC"},
  {0xD1, 0x00, 0x00, 1, "POP DE"},
  {0xE1, 0x00, 0x00, 1, "POP HL"},
  {0xDD, 0xE1, 0x00, 2, "POP IX"},
  {0xFD, 0xE1, 0x00, 2, "POP IY"},
  {0xF5, 0x00, 0x00, 1, "PUSH AF"},
  {0xC5, 0x00, 0x00, 1, "PUSH BC"},
  {0xD5, 0x00, 0x00, 1, "PUSH DE"},
  {0xE5, 0x00, 0x00, 1, "PUSH HL"},
  {0xDD, 0xE5, 0x00, 2, "PUSH IX"},
  {0xFD, 0xE5, 0x00, 2, "PUSH IY"},
  {0xC9, 0x00, 0x00, 1, "RET"},
  {0xD8, 0x00, 0x00, 1, "RET C"},
  {0xD0, 0x00, 0x00, 1, "RET NC"},
  {0xF8, 0x00, 0x00, 1, "RET M"},
  {0xF0, 0x00, 0x00, 1, "RET P"},
  {0xC8, 0x00, 0x00, 1, "RET Z"},
  {0xC0, 0x00, 0x00, 1, "RET NZ"},
  {0xE8, 0x00, 0x00, 1, "RET PE"},
  {0xE0, 0x00, 0x00, 1, "RET PO"},
  {0xED, 0x4D, 0x00, 2, "RETI"},
  {0xED, 0x45, 0x00, 2, "RET%N%"},
  {0x17, 0x00, 0x00, 1, "RLA"},
  {0xCB, 0x10 + 7, 0x00, 2, "RL A"},
  {0xCB, 0x10 + 0, 0x00, 2, "RL B"},
  {0xCB, 0x10 + 1, 0x00, 2, "RL C"},
  {0xCB, 0x10 + 2, 0x00, 2, "RL D"},
  {0xCB, 0x10 + 3, 0x00, 2, "RL E"},
  {0xCB, 0x10 + 4, 0x00, 2, "RL H"},
  {0xCB, 0x10 + 5, 0x00, 2, "RL L"},
  {0xCB, 0x16, 0x00, 2, "RL (HL)"},
  {0xDD, 0xCB, 0x16, 3, "RL (IX+%N%)"},
  {0xFD, 0xCB, 0x16, 3, "RL (IY+%N%)"},
  {0x07, 0x00, 0x00, 1, "RLCA"},
  {0xCB, 0x00, 0x00, 2, "RLC r"},
  {0xCB, 0x06, 0x00, 2, "RLC (HL)"},
  {0xDD, 0xCB, 0x06, 3, "RLC (IX+%N%)"},
  {0xFD, 0xCB, 0x06, 3, "RLC (IY+%N%)"},
  {0xED, 0x6F, 0x00, 2, "RLD"},
  {0x1F, 0x00, 0x00, 1, "RRA"},
  {0xCB, 0x18, 0x00, 2, "RR r"},
  {0xCB, 0x1E, 0x00, 2, "RR (HL)"},
  {0xDD, 0xCB, 0x1E, 3, "RR (IX+%N%)"},
  {0xFD, 0xCB, 0x1E, 3, "RR (IY+%N%)"},
  {0x0F, 0x00, 0x00, 1, "RRCA"},
  {0xCB, 0x08 + 7, 0x00, 2, "RRC A"},
  {0xCB, 0x08 + 0, 0x00, 2, "RRC B"},
  {0xCB, 0x08 + 1, 0x00, 2, "RRC C"},
  {0xCB, 0x08 + 2, 0x00, 2, "RRC D"},
  {0xCB, 0x08 + 3, 0x00, 2, "RRC E"},
  {0xCB, 0x08 + 4, 0x00, 2, "RRC H"},
  {0xCB, 0x08 + 5, 0x00, 2, "RRC L"},
  {0xCB, 0x0E, 0x00, 2, "RRC (HL)"},
  {0xDD, 0xCB, 0x0E, 3, "RRC (IX+%N%)"},
  {0xFD, 0xCB, 0x0E, 3, "RRC (IY+%N%)"},
  {0xED, 0x67, 0x00, 2, "RRD"},
  {0xC7, 0x00, 0x00, 1, "RST 0"},
  {0xCF, 0x00, 0x00, 1, "RST 08H"},
  {0xD7, 0x00, 0x00, 1, "RST 10H"},
  {0xDF, 0x00, 0x00, 1, "RST 18H"},
  {0xE7, 0x00, 0x00, 1, "RST 20H"},
  {0xEF, 0x00, 0x00, 1, "RST 28H"},
  {0xF7, 0x00, 0x00, 1, "RST 30H"},
  {0xFF, 0x00, 0x00, 1, "RST 38H"},
  {0x98 + 7, 0x00, 0x00, 1, "SBC A"},
  {0x98 + 0, 0x00, 0x00, 1, "SBC B"},
  {0x98 + 1, 0x00, 0x00, 1, "SBC C"},
  {0x98 + 2, 0x00, 0x00, 1, "SBC D"},
  {0x98 + 3, 0x00, 0x00, 1, "SBC E"},
  {0x98 + 4, 0x00, 0x00, 1, "SBC H"},
  {0x98 + 5, 0x00, 0x00, 1, "SBC L"},
  {0xDE, 0x00, 0x00, 1, "SBC A,%N%"},
  {0x9E, 0x00, 0x00, 1, "SBC (HL)"},
  {0xDD, 0x9E, 0x00, 2, "SBC A,(IX+%N%)"},
  {0xFD, 0x9E, 0x00, 2, "SBC A,(IY+%N%)"},
  {0xED, 0x42, 0x00, 2, "SBC HL,BC"},
  {0xED, 0x52, 0x00, 2, "SBC HL,DE"},
  {0xED, 0x62, 0x00, 2, "SBC HL,HL"},
  {0xED, 0x72, 0x00, 2, "SBC HL,SP"},
  {0x37, 0x00, 0x00, 1, "SCF"},
  {0xCB, 0x20 + 7, 0x00, 2, "SLA A"},
  {0xCB, 0x20 + 0, 0x00, 2, "SLA B"},
  {0xCB, 0x20 + 1, 0x00, 2, "SLA C"},
  {0xCB, 0x20 + 2, 0x00, 2, "SLA D"},
  {0xCB, 0x20 + 3, 0x00, 2, "SLA E"},
  {0xCB, 0x20 + 4, 0x00, 2, "SLA H"},
  {0xCB, 0x20 + 5, 0x00, 2, "SLA L"},
  {0xCB, 0x26, 0x00, 2, "SLA (HL)"},
  {0xDD, 0xCB, 0x26, 3, "SLA (IX+%N%)"},
  {0xFD, 0xCB, 0x26, 3, "SLA (IY+%N%)"},
  {0xCB, 0x28 + 7, 0x00, 2, "SRA A"},
  {0xCB, 0x28 + 0, 0x00, 2, "SRA B"},
  {0xCB, 0x28 + 1, 0x00, 2, "SRA C"},
  {0xCB, 0x28 + 2, 0x00, 2, "SRA D"},
  {0xCB, 0x28 + 3, 0x00, 2, "SRA E"},
  {0xCB, 0x28 + 4, 0x00, 2, "SRA H"},
  {0xCB, 0x28 + 5, 0x00, 2, "SRA L"},
  {0xCB, 0x2E, 0x00, 2, "SRA (HL)"},
  {0xDD, 0xCB, 0x2E, 3, "SRA (IX+%N%)"},
  {0xFD, 0xCB, 0x2E, 3, "SRA (IY+%N%)"},
  {0xCB, 0x30 + 7, 0x00, 2, "SLL A"},
  {0xCB, 0x30 + 0, 0x00, 2, "SLL B"},
  {0xCB, 0x30 + 1, 0x00, 2, "SLL C"},
  {0xCB, 0x30 + 2, 0x00, 2, "SLL D"},
  {0xCB, 0x30 + 3, 0x00, 2, "SLL E"},
  {0xCB, 0x30 + 4, 0x00, 2, "SLL H"},
  {0xCB, 0x30 + 5, 0x00, 2, "SLL L"},
  {0xCB, 0x36, 0x00, 2, "SLL (HL)"},
  {0xDD, 0xCB, 0x36, 3, "SLL (IX+%N%)"},
  {0xFD, 0xCB, 0x36, 3, "SLL (IY+%N%)"},
  {0xCB, 0x38 + 7, 0x00, 2, "SRL A"},
  {0xCB, 0x38 + 0, 0x00, 2, "SRL B"},
  {0xCB, 0x38 + 1, 0x00, 2, "SRL C"},
  {0xCB, 0x38 + 2, 0x00, 2, "SRL D"},
  {0xCB, 0x38 + 3, 0x00, 2, "SRL E"},
  {0xCB, 0x38 + 4, 0x00, 2, "SRL H"},
  {0xCB, 0x38 + 5, 0x00, 2, "SRL L"},
  {0xCB, 0x3E, 0x00, 2, "SRL (HL)"},
  {0xDD, 0xCB, 0x3E, 3, "SRL (IX+%N%)"},
  {0xFD, 0xCB, 0x3E, 3, "SRL (IY+%N%)"},
  {0x90 + 7, 0x00, 0x00, 1, "SUB A"},
  {0x90 + 0, 0x00, 0x00, 1, "SUB B"},
  {0x90 + 1, 0x00, 0x00, 1, "SUB C"},
  {0x90 + 2, 0x00, 0x00, 1, "SUB D"},
  {0x90 + 3, 0x00, 0x00, 1, "SUB E"},
  {0x90 + 4, 0x00, 0x00, 1, "SUB H"},
  {0x90 + 5, 0x00, 0x00, 1, "SUB L"},
  {0xD6, 0x00, 0x00, 1, "SUB %N%"},
  {0x96, 0x00, 0x00, 1, "SUB (HL)"},
  {0xDD, 0x96, 0x00, 2, "SUB (IX+%N%)"},
  {0xFD, 0x96, 0x00, 2, "SUB (IY+%N%)"},
  {0xA8 + 7, 0x00, 0x00, 1, "XOR A"},
  {0xA8 + 0, 0x00, 0x00, 1, "XOR B"},
  {0xA8 + 1, 0x00, 0x00, 1, "XOR C"},
  {0xA8 + 2, 0x00, 0x00, 1, "XOR D"},
  {0xA8 + 3, 0x00, 0x00, 1, "XOR E"},
  {0xA8 + 4, 0x00, 0x00, 1, "XOR H"},
  {0xA8 + 5, 0x00, 0x00, 1, "XOR L"},
  {0xEE, 0x00, 0x00, 1, "XOR %N%"},
  {0xAE, 0x00, 0x00, 1, "XOR (HL)"},
  {0xDD, 0xAE, 0x00, 2, "XOR (IX+%N%)"},
  {0xFD, 0xAE, 0x00, 2, "XOR (IY+%N%)"},

#define RESR(b, r, n)  {0xCB, 0x80 + 8 * b + n, 0x00, 2, "RES "#b","#r},
#define RES(b) RESR(b, A, 7) RESR(b, B, 0) RESR(b, C, 1)        \
  RESR(b, D, 2) RESR(b, E, 3) RESR(b, H, 4) RESR(b, L, 5)
  RES(0) RES(1) RES(2) RES(3) RES(4) RES(5) RES(6) RES(7)
#undef RES
#define RES(b)  {0xCB, 0x86 + 8 * b, 0x00, 2, "RES "#b",(HL)"},
  RES(0) RES(1) RES(2) RES(3) RES(4) RES(5) RES(6) RES(7)
#undef RES
#define RES(b)  {0xDD, 0xCB, 0x86 + 8 * b, 3, "RES "#b",(IX+%N%)"},
  RES(0) RES(1) RES(2) RES(3) RES(4) RES(5) RES(6) RES(7)
#undef RES
#define RES(b)  {0xFD, 0xCB, 0x86 + 8 * b, 3, "RES "#b",(IY+%N%)"},
  RES(0) RES(1) RES(2) RES(3) RES(4) RES(5) RES(6) RES(7)

#define BITR(b, r, n)  {0xCB, 0x40 + 8 * b + n, 0x00, 2, "BIT "#b","#r},
#define BIT(b) BITR(b, A, 7) BITR(b, B, 0) BITR(b, C, 1)        \
  BITR(b, D, 2) BITR(b, E, 3) BITR(b, H, 4) BITR(b, L, 5)
  BIT(0) BIT(1) BIT(2) BIT(3) BIT(4) BIT(5) BIT(6) BIT(7)
#undef BIT
#define BIT(b)  {0xCB, 0x46 + 8 * b, 0x00, 2, "BIT "#b",(HL)"},
  BIT(0) BIT(1) BIT(2) BIT(3) BIT(4) BIT(5) BIT(6) BIT(7)
#undef BIT
#define BIT(b)  {0xDD, 0xCB, 0x46 + 8 * b, 3, "BIT "#b",(IX+%N%)"},
  BIT(0) BIT(1) BIT(2) BIT(3) BIT(4) BIT(5) BIT(6) BIT(7)
#undef BIT
#define BIT(b)  {0xFD, 0xCB, 0x46 + 8 * b, 3, "BIT "#b",(IY+%N%)"},
  BIT(0) BIT(1) BIT(2) BIT(3) BIT(4) BIT(5) BIT(6) BIT(7)

#define SETR(b, r, n)  {0xCB, 0xC0 + 8 * b + n, 0x00, 2, "SET "#b","#r},
#define SET(b) SETR(b, A, 7) SETR(b, B, 0) SETR(b, C, 1)        \
  SETR(b, D, 2) SETR(b, E, 3) SETR(b, H, 4) SETR(b, L, 5)
  SET(0) SET(1) SET(2) SET(3) SET(4) SET(5) SET(6) SET(7)
#undef SET
#define SET(b)  {0xCB, 0xC6 + 8 * b, 0x00, 2, "SET "#b",(HL)"},
  SET(0) SET(1) SET(2) SET(3) SET(4) SET(5) SET(6) SET(7)
#undef SET
#define SET(b)  {0xDD, 0xCB, 0xC6 + 8 * b, 3, "SET "#b",(IX+%N%)"},
  SET(0) SET(1) SET(2) SET(3) SET(4) SET(5) SET(6) SET(7)
#undef SET
#define SET(b)  {0xFD, 0xCB, 0xC6 + 8 * b, 3, "SET "#b",(IY+%N%)"},
  SET(0) SET(1) SET(2) SET(3) SET(4) SET(5) SET(6) SET(7)

  {0, 0, 0, 0, 0}
};

InstrDesc Disassembler::findInstruction(UBYTE* mem)
{
  int i = 0;

  while (instrTab[i].nbOpcode != 0) {
    if (instrTab[i].opcode1 == mem[0]) {
      if (instrTab[i].nbOpcode == 1) {
        return instrTab[i];
      } else if (instrTab[i].nbOpcode == 2) {
        if (instrTab[i].opcode2 == mem[1])
          return instrTab[i];
      } else if (instrTab[i].nbOpcode == 3) {
        if (instrTab[i].opcode2 == mem[1] && instrTab[i].opcode3 == mem[3])
          return instrTab[i];
      } else {
        std::cout << "Disassembler Error" << std::endl;
        throw;
      }
    }
    ++i;
  }
  std::cout << "Disassembler Error" << std::endl;
  throw;
}

bool Disassembler::findPattern(char const* pattern, char const* str)
{
  int i = 0;
  int j = 0;
  while (pattern[i]) {
    if (!str[j] || pattern[i] != str[j])
      return false;
    ++i; ++j;
  }
  return true;
}

int Disassembler::disasInstruction(UBYTE* mem, int, std::string &str)
{
  InstrDesc desc;
  std::ostringstream ss;
  try {
    desc = findInstruction(mem);
  } catch (std::exception const&) {
    str = "??";
    return 1;
  }
  int n = desc.nbOpcode;
  for (int i = 0; desc.string[i]; ++i) {
    if (findPattern("%NN%", desc.string + i)) {
      n += 2;
      UWORD NN = 0;
      if (desc.nbOpcode == 1)
        NN = *reinterpret_cast<UWORD*>(mem + 1);
      else if (desc.nbOpcode == 2 || desc.nbOpcode == 2)
        NN = *reinterpret_cast<UWORD*>(mem + 2);
      ss << std::hex << "0x" << NN;
      i += 3;
    } else if (findPattern("%N%", desc.string + i)) {
      UWORD NN = 0;
      n += 1;
      if (desc.nbOpcode == 1)
        NN = mem[1];
      else if (desc.nbOpcode == 2 || desc.nbOpcode == 2)
        NN = mem[2];
      ss << std::hex << "0x" << NN;
      i += 2;
    } else {
      ss << desc.string[i];
    }
  }
  str = ss.str();
  return n;
}

int Disassembler::displayInstruction(UBYTE* mem, int size)
{
  std::string str;
  int n = disasInstruction(mem, size, str);
  std::cout << str << std::endl;
  return n;
}
